VTable data;
  data.Parse(&fl);

  room->zone = zone;
  room->number = nr;

  room->name = str_dup(data.GetString("Name", "An empty room"));
  room->description =
    str_dup(data.GetString("Desc", "This room is empty!  Boo!\n"));
  room->night_desc = str_dup(data.GetString("NightDesc", NULL));
  room->room_flags.FromString(data.GetString("Flags", "0"));
  if (room->room_flags.IsSet(ROOM_PEACEFUL))
    room->peaceful = 1;
  room->sector_type = data.LookupInt("SecType", spirit_name, DEFAULT_SECTOR_TYPE);
  room->matrix = data.GetLong("MatrixExit", 0);
  room->io = data.GetInt("IO", 0);
  room->bandwidth = data.GetInt("Bandwidth", 0);
  room->access = data.GetInt("Access", 0);
  room->trace = data.GetInt("Trace", 0);
  room->rtg = data.GetLong("RTG", 1100);
  room->jacknumber = data.GetLong("JackID", 0);
  room->address = str_dup(data.GetString("Address", "An undisclosed location"));
  room->spec = data.GetInt("POINTS/SpecIdx", 0);
  room->rating = data.GetInt("POINTS/Rating", 0);
  room->vision[0] = data.GetInt("POINTS/Light", 0);
  room->vision[1] = data.GetInt("POINTS/Smoke", 0);
  room->background[CURRENT_BACKGROUND_COUNT] = room->background[PERMANENT_BACKGROUND_COUNT] = data.GetInt("POINTS/Background", 0);
  room->background[CURRENT_BACKGROUND_TYPE] = room->background[PERMANENT_BACKGROUND_TYPE] = data.GetInt("POINTS/BackgroundType", 0);
  room->staff_level_lock = data.GetInt("POINTS/StaffLockLevel", 0);
  if (room->vision[0] == -1) {
    if (room->room_flags.IsSet(ROOM_DARK))
      room->vision[0] = LIGHT_FULLDARK;
    else if (room->room_flags.IsSet(ROOM_LOW_LIGHT))
      room->vision[0] = LIGHT_PARTLIGHT;
    else
      room->vision[0] = LIGHT_NORMAL;
  }
  room->crowd = data.GetInt("Crowd", 0);
  room->cover = data.GetInt("Cover", 0);
  room->x = data.GetInt("X", DEFAULT_DIMENSIONS_X);
  room->y = data.GetInt("Y", DEFAULT_DIMENSIONS_Y);
  room->z = data.GetFloat("Z", DEFAULT_DIMENSIONS_Z);
  room->type = data.GetInt("RoomType", 0);

  // read in directions, but only if we're not a cab.
  if (!((GET_ROOM_VNUM(room) >= FIRST_SEATTLE_CAB && GET_ROOM_VNUM(room) <= LAST_SEATTLE_CAB)
         || (GET_ROOM_VNUM(room) >= FIRST_PORTLAND_CAB && GET_ROOM_VNUM(room) <= LAST_PORTLAND_CAB)
         || (GET_ROOM_VNUM(room) >= FIRST_CARIBBEAN_CAB && GET_ROOM_VNUM(room) <= LAST_CARIBBEAN_CAB)))
  {
    for (int i = 0; *fulldirs[i] != '\n'; i++) {
    char sect[16];
    snprintf(sect, sizeof(sect), "EXIT %s", fulldirs[i]);

    room->dir_option[i] = NULL;

    if (data.DoesSectionExist(sect)) {
      char field[64];

      snprintf(field, sizeof(field), "%s/ToVnum", sect);
      int to_vnum = data.GetInt(field, -1);

      if (to_vnum < 0
          || (to_vnum >= FIRST_SEATTLE_CAB && to_vnum <= LAST_SEATTLE_CAB)
          || (to_vnum >= FIRST_PORTLAND_CAB && to_vnum <= LAST_PORTLAND_CAB)
          || (to_vnum >= FIRST_CARIBBEAN_CAB && to_vnum <= LAST_CARIBBEAN_CAB))
      {
        log_vfprintf("Room #%d's %s exit had invalid destination -- skipping",
            nr, fulldirs[i]);
        continue;
      }

      room->dir_option[i] = new room_direction_data;
      room_direction_data *dir = room->dir_option[i];

      dir->to_room = &world[0];
      dir->to_room_vnum = to_vnum;

      snprintf(field, sizeof(field), "%s/Keywords", sect);
      dir->keyword = str_dup(data.GetString(field, NULL));

      snprintf(field, sizeof(field), "%s/Desc", sect);
      dir->general_description = str_dup(data.GetString(field, NULL));

      snprintf(field, sizeof(field), "%s/Flags", sect);
      int flags = data.GetInt(field, 0);

      if (flags == 1)
        dir->exit_info = EX_ISDOOR;
      else if (flags == 2)
        dir->exit_info = EX_ISDOOR | EX_PICKPROOF;
      else if (flags == 3)
        dir->exit_info = EX_ISDOOR | EX_ASTRALLY_WARDED;
      else if (flags == 4)
        dir->exit_info = EX_ISDOOR | EX_PICKPROOF | EX_ASTRALLY_WARDED;
      else
        dir->exit_info = 0;

      snprintf(field, sizeof(field), "%s/MoreFlags", sect);
      int moreflags = data.GetInt(field, 0);

      if (moreflags >= 4) {
        moreflags -= 4;
        dir->exit_info |= EX_CANT_SHOOT_THROUGH;
      }

      if (moreflags == 1)
        dir->exit_info |= EX_WINDOWED;
      else if (moreflags == 2)
        dir->exit_info |= EX_BARRED_WINDOW;

      snprintf(field, sizeof(field), "%s/Material", sect);
      dir->material = data.LookupInt(field, material_names, DEFAULT_EXIT_MATERIAL);

      snprintf(field, sizeof(field), "%s/Barrier", sect);
      dir->barrier = data.GetInt(field, DEFAULT_EXIT_BARRIER_RATING);
      dir->condition = dir->barrier;

      snprintf(field, sizeof(field), "%s/KeyVnum", sect);
      dir->key = data.GetInt(field, -1);

      snprintf(field, sizeof(field), "%s/LockRating", sect);
      dir->key_level = data.GetInt(field, 0);

      snprintf(field, sizeof(field), "%s/HiddenRating", sect);
      dir->hidden = data.GetInt(field, 0);
      if (dir->hidden > MAX_EXIT_HIDDEN_RATING) {
        dir->hidden = MAX_EXIT_HIDDEN_RATING;
      }

      snprintf(field, sizeof(field), "%s/GoIntoSecondPerson", sect);
      dir->go_into_secondperson = str_dup(data.GetString(field, NULL));

      snprintf(field, sizeof(field), "%s/GoIntoThirdPerson", sect);
      dir->go_into_thirdperson = str_dup(data.GetString(field, NULL));

      snprintf(field, sizeof(field), "%s/ComeOutOfThirdPerson", sect);
      dir->come_out_of_thirdperson = str_dup(data.GetString(field, NULL));

#ifdef USE_DEBUG_CANARIES
      dir->canary = CANARY_VALUE;
#endif
    }
  }
  }

  room->ex_description = NULL;

  // finally, read in extra descriptions
  for (int i = 0; true; i++) {
    char sect[16];
    snprintf(sect, sizeof(sect), "EXTRADESC %d", i);

    if (data.NumFields(sect) > 0) {
      char field[64];

      snprintf(field, sizeof(field), "%s/Keywords", sect);
      char *keywords = str_dup(data.GetString(field, NULL));

      if (!*keywords) {
        log_vfprintf("Room #%d's extra description #%d had no keywords -- skipping",
            nr, i);
        DELETE_ARRAY_IF_EXTANT(keywords);
        continue;
      }


      extra_descr_data *desc = new extra_descr_data;
      desc->keyword = keywords;
      snprintf(field, sizeof(field), "%s/Desc", sect);
      desc->description = str_dup(data.GetString(field, NULL));
      desc->next = room->ex_description;
      room->ex_description = desc;
    } else
      break;
  }

  top_of_world = rnum++;
  if (top_of_world >= top_of_world_array) {
    snprintf(buf, sizeof(buf), "WARNING: top_of_world >= top_of_world_array at %ld / %d.", top_of_world, top_of_world_array);
    mudlog(buf, NULL, LOG_SYSLOG, TRUE);
  }
}

/* read direction data */
void setup_dir(FILE * fl, int room, int dir)
{
  int t[7];
  char line[256];
  int retval;

  snprintf(buf2, sizeof(buf2), "room #%ld, direction D%d", world[room].number, dir);

  world[room].dir_option[dir] = new room_direction_data;
  world[room].dir_option[dir]->general_description = fread_string(fl, buf2);
  world[room].dir_option[dir]->keyword = fread_string(fl, buf2);

  if (!get_line(fl, line)) {
    fprintf(stderr, "FATAL ERROR: Format error, %s: Cannot get line from file.\n", buf2);
    exit(ERROR_WORLD_BOOT_FORMAT_ERROR);
  }
  if ((retval = sscanf(line, " %d %d %d %d %d %d %d", t, t + 1, t + 2, t + 3,
                       t + 4, t + 5, t + 6)) < 4) {
    fprintf(stderr, "FATAL ERROR: Format error, %s: Expected seven numbers like ' # # # # # # #'\n", buf2);
    exit(ERROR_WORLD_BOOT_FORMAT_ERROR);
  }
  if (t[0] == 1)
    world[room].dir_option[dir]->exit_info = EX_ISDOOR;
  else if (t[0] == 2)
    world[room].dir_option[dir]->exit_info = EX_ISDOOR | EX_PICKPROOF;
  else
    world[room].dir_option[dir]->exit_info = 0;

  world[room].dir_option[dir]->key = t[1];
  world[room].dir_option[dir]->to_room = &world[0]; // Will be set properly during world renumbering.
  world[room].dir_option[dir]->to_room_vnum = MAX(0, t[2]);
  world[room].dir_option[dir]->key_level = t[3];

  world[room].dir_option[dir]->material = (retval > 4) ? t[4] : 5;
  world[room].dir_option[dir]->barrier = (retval > 5) ? t[5] : 4;
  world[room].dir_option[dir]->condition = (retval > 5) ? t[5] : 4;
  world[room].dir_option[dir]->hidden = (retval > 6) ? t[6] : 0;
}
